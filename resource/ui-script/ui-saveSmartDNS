#!/bin/bash
shttps[0]=$(grep 'server-https ' /etc/smartdns/smartdns.conf | awk NR==1)
shttps[1]=$(grep 'server-https ' /etc/smartdns/smartdns.conf | awk NR==2)
xDNScDomainO=$(jq -r '.dns.xDNS[]' /opt/de_GWD/0conf | grep -v "/dq" | cut -d: -f1)
xDNScIPO=$(jq -r --arg domainO "$xDNScDomainO" '.dns.hosts."\($domainO)"' /opt/de_GWD/v2dns/config.json)


n=$[$(sed -n '/serve-expired-reply-ttl/=' /etc/smartdns/smartdns.conf)+1]
sed -i "$n,\$d" /etc/smartdns/smartdns.conf
cat << EOF >>/etc/smartdns/smartdns.conf
server 127.0.0.1:5330 -exclude-default-group -group xDNS

EOF

if [[ -z $(jq -r '.dns.china' /opt/de_GWD/0conf) ]] || [[ $(jq -r '.dns.china' /opt/de_GWD/0conf) = "null" ]]; then
  jq --arg dnsChina "114.114.114.114 114.114.115.115 119.29.29.29 119.28.28.28 182.254.118.118 223.5.5.5 223.6.6.6" '.dns.china=$dnsChina' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
  chmod 666 /opt/de_GWD/0conf
fi

for dnsChina in $(jq -r '.dns.china' /opt/de_GWD/0conf); do
    echo "server $dnsChina" >>/etc/smartdns/smartdns.conf
done
systemctl restart smartdns



doh1=$(jq -r '.dns.xDNS[]' /opt/de_GWD/0conf | grep "/dq" | awk NR==1)
doh2=$(jq -r '.dns.xDNS[]' /opt/de_GWD/0conf | grep "/dq" | awk NR==2)

[ -n "$doh1" ] && doh1Domain=$(echo $doh1 | cut -d/ -f1 | cut -d: -f1)
[ -n "$doh2" ] && doh2Domain=$(echo $doh2 | cut -d/ -f1 | cut -d: -f1)

[ -n "$doh1" ] && doh1IP=$(dig @127.0.0.1 $doh1Domain -4p 5310 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | sed '/^\s*$/d')
[ -n "$doh2" ] && doh2IP=$(dig @127.0.0.1 $doh2Domain -4p 5310 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | sed '/^\s*$/d')

[ -n "$doh1" ] && doh1Port=$(echo $doh1 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
[ -n "$doh2" ] && doh2Port=$(echo $doh2 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')

[ -n "$doh1" ] && doh1PortStr=$([ -n "$doh1Port" ] && echo $doh1Port | sed 's/^/:/')
[ -n "$doh2" ] && doh2PortStr=$([ -n "$doh2Port" ] && echo $doh2Port | sed 's/^/:/')

xDNSc=$(jq -r '.dns.xDNS[]' /opt/de_GWD/0conf | grep -v "/dq" | grep -v "null")
[ -n "$xDNSc" ] && xDNScDomain=$(echo $xDNSc | cut -d: -f1)
[ -n "$xDNSc" ] && xDNScPort=$(echo $xDNSc | cut -d: -f2 | grep '^[[:digit:]]*$')
[ -n "$xDNSc" ] && xDNScIP=$(dig @127.0.0.1 $xDNScDomain -4p 5310 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | sed '/^\s*$/d')


echo >>/etc/smartdns/smartdns.conf
if [[ -n $doh1IP ]]; then
echo "server-https https://$doh1IP$doh1PortStr/dq -host-name $doh1Domain -exclude-default-group -group xDNS" >>/etc/smartdns/smartdns.conf
else
echo ${shttps[0]} >>/etc/smartdns/smartdns.conf
fi

if [[ -n $doh2IP ]]; then
echo "server-https https://$doh2IP$doh2PortStr/dq -host-name $doh2Domain -exclude-default-group -group xDNS" >>/etc/smartdns/smartdns.conf
else
echo ${shttps[1]} >>/etc/smartdns/smartdns.conf
fi
unset shttps
systemctl restart smartdns >/dev/null

if [[ -n "$xDNScIP" ]];then 
jq --arg xDNScDomain "$xDNScDomain" --arg xDNScIP "$xDNScIP" '.dns.hosts+={"\($xDNScDomain)":"\($xDNScIP)"}' /opt/de_GWD/v2dns/config.json | sponge /opt/de_GWD/v2dns/config.json
else
jq --arg xDNScDomain "$xDNScDomainO" --arg xDNScIP "$xDNScIPO" '.dns.hosts+={"\($xDNScDomain)":"\($xDNScIP)"}' /opt/de_GWD/v2dns/config.json | sponge /opt/de_GWD/v2dns/config.json
fi
chmod 666 /opt/de_GWD/v2dns/config.json

echo $doh1IP $doh2IP $xDNScIP | xargs -n 1 | sort | uniq >/opt/de_GWD/IPxDNS
sed -i '/^\s*$/d' /opt/de_GWD/IPxDNS
sed -i 's/^/add doh &/g' /opt/de_GWD/IPxDNS
mv -f /opt/de_GWD/IPxDNS /opt/de_GWD/IPxDNSSET
ipset -! -R </opt/de_GWD/IPxDNSSET

if [[ -n $xDNScIP ]]; then
cat << EOF >/opt/de_GWD/xDNSc/config.json
{
  "dns":{"tag":"dnsFlow","servers":[{"address":"127.0.0.1","port":53}]},
  "routing":{
    "rules":[
      {"type":"field","inboundTag":["dnsFlow"],"outboundTag": "direct"},
      {"type":"field","inboundTag":["xDNScIN"],"outboundTag":"xDNScOUT"},
      {"type":"field","port":"53","outboundTag":"xDNScOUT"}
    ]
  },
  "inbounds": [
    {
      "tag":"xDNScIN",
      "port":5330,
      "protocol":"dokodemo-door",
      "settings":{"address":"1.1.1.1","port":53,"network":"tcp,udp"}
    }
  ],
  "outbounds": [
    {
      "tag": "xDNScOUT",
      "protocol": "vless",
      "settings": {
        "vnext": [
          {
            "address": "$xDNScDomain",
            "port": $xDNScPort,
            "users": [
              {
                "id": "ccabd6d0-beb2-4b8a-8f94-45f3dc235ebe",
                "flow": "xtls-rprx-direct",
                "encryption": "none",
                "level": 1
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "tcp",
        "security": "xtls",
        "xtlsSettings": {
          "serverName": "$xDNScDomain"
        }
      },
      "sockopt": {
        "mark": 255,
        "domainStrategy": "UseIPv4"
      }
    },
    {
      "tag": "direct",
      "protocol": "freedom",
      "streamSettings": {"sockopt":{"mark":255}}
    }
  ]
}
EOF

systemctl enable xDNSc >/dev/null 2>&1
systemctl restart xDNSc >/dev/null

if [[ $(systemctl is-active xDNSc) != "active" ]]; then
sed -i '/Nice=/d' /lib/systemd/system/xDNSc.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/xDNSc.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/xDNSc.service
systemctl daemon-reload >/dev/null
systemctl restart xDNSc >/dev/null
fi
else
systemctl disable xDNSc >/dev/null 2>&1
systemctl stop xDNSc >/dev/null
fi

